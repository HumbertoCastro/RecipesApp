{"ast":null,"code":"var _jsxFileName = \"/home/humberto/Projetos/sd-016-a-project-recipes-app/src/components/Ingredients.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport CheckBoxIngredient from './CheckBoxIngredient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Ingredients(_ref) {\n  _s();\n\n  let {\n    element\n  } = _ref;\n  const history = useHistory();\n\n  const clk = target => {\n    console.log(target.value);\n    const {\n      value\n    } = target;\n    const {\n      cocktails,\n      meals\n    } = JSON.parse(localStorage.getItem('inProgressRecipes'));\n    let array = [value];\n\n    if (history.location.pathname.includes('drinks')) {\n      if (cocktails[element.idDrink] !== undefined) {\n        array = cocktails[element.idDrink];\n        array.push(value);\n      }\n\n      const newObject = {\n        cocktails: { ...cocktails,\n          [element.idDrink]: array\n        },\n        meals: { ...meals\n        }\n      };\n      localStorage.setItem('inProgressRecipes', JSON.stringify(newObject));\n    } else {\n      if (meals[element.idMeal] !== undefined) {\n        array = meals[element.idMeal];\n        array.push(value);\n      }\n\n      const newObject = {\n        cocktails: { ...cocktails\n        },\n        meals: { ...meals,\n          [element.idMeal]: array\n        }\n      };\n      localStorage.setItem('inProgressRecipes', JSON.stringify(newObject));\n      target.checked = true;\n    }\n  };\n\n  const foodIngredient = Object.values(Object.fromEntries(Object.entries(element).filter(_ref2 => {\n    let [key] = _ref2;\n    return key.includes('strIngredient');\n  }))).filter(x => x !== null && x !== '');\n  const foodMeasure = Object.values(Object.fromEntries(Object.entries(element).filter(_ref3 => {\n    let [key] = _ref3;\n    return key.includes('strMeasure');\n  }))).filter(x => x !== null && x !== '');\n  const ing = '-ingredient-name-and-measure';\n\n  const renderIngredients = () => {\n    if (history.location.pathname.includes('/in-progress')) {\n      return foodIngredient.map((x, i) => /*#__PURE__*/_jsxDEV(CheckBoxIngredient, {\n        clk: clk,\n        ingr: x,\n        i: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 24\n      }, this));\n    }\n\n    return foodIngredient.map((x, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        \"data-testid\": `${index}${ing}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: '<li>'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: x\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: '</li>'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, `${index}-food`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        \"data-testid\": `${index}${ing}`,\n        children: foodMeasure[index]\n      }, `${index}-`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, `${index}-food-ingrediet`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this));\n  };\n\n  useEffect(() => {\n    renderIngredients();\n  }, []);\n  return renderIngredients();\n}\n\n_s(Ingredients, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n\n_c = Ingredients;\nexport default Ingredients;\nIngredients.propTypes = {\n  element: PropTypes.shape({\n    element: PropTypes.string.isRequired\n  }).isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Ingredients\");","map":{"version":3,"sources":["/home/humberto/Projetos/sd-016-a-project-recipes-app/src/components/Ingredients.jsx"],"names":["React","useEffect","PropTypes","useHistory","CheckBoxIngredient","Ingredients","element","history","clk","target","console","log","value","cocktails","meals","JSON","parse","localStorage","getItem","array","location","pathname","includes","idDrink","undefined","push","newObject","setItem","stringify","idMeal","checked","foodIngredient","Object","values","fromEntries","entries","filter","key","x","foodMeasure","ing","renderIngredients","map","i","index","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport CheckBoxIngredient from './CheckBoxIngredient';\n\nfunction Ingredients({ element }) {\n  const history = useHistory();\n  const clk = (target) => {\n    console.log(target.value);\n    const { value } = target;\n    const { cocktails, meals } = JSON.parse(localStorage.getItem('inProgressRecipes'));\n    let array = [value];\n    if (history.location.pathname.includes('drinks')) {\n      if (cocktails[element.idDrink] !== undefined) {\n        array = cocktails[element.idDrink];\n        array.push(value);\n      }\n      const newObject = {\n        cocktails: {\n          ...cocktails,\n          [element.idDrink]: array,\n        },\n        meals: {\n          ...meals,\n        },\n      };\n      localStorage.setItem('inProgressRecipes', JSON.stringify(newObject));\n    } else {\n      if (meals[element.idMeal] !== undefined) {\n        array = meals[element.idMeal];\n        array.push(value);\n      }\n      const newObject = {\n        cocktails: {\n          ...cocktails,\n        },\n        meals: {\n          ...meals,\n          [element.idMeal]: array,\n        },\n      };\n      localStorage.setItem('inProgressRecipes', JSON.stringify(newObject));\n      target.checked = true;\n    }\n  };\n  const foodIngredient = Object.values(Object\n    .fromEntries(Object\n      .entries(element)\n      .filter(([key]) => key.includes('strIngredient'))))\n    .filter((x) => x !== null && x !== '');\n  const foodMeasure = Object.values(Object\n    .fromEntries(Object\n      .entries(element)\n      .filter(([key]) => key.includes('strMeasure'))))\n    .filter((x) => x !== null && x !== '');\n  const ing = '-ingredient-name-and-measure';\n  const renderIngredients = () => {\n    if (history.location.pathname.includes('/in-progress')) {\n      return foodIngredient\n        .map((x, i) => <CheckBoxIngredient key={ i } clk={ clk } ingr={ x } i={ i } />);\n    }\n    return foodIngredient\n      .map((x, index) => (\n        <div key={ `${index}-food-ingrediet` }>\n          <li key={ `${index}-food` } data-testid={ `${index}${ing}` }>\n            <span>{ '<li>'}</span><span>{x}</span>\n            <span>{ '</li>'}</span>\n          </li>\n          <li\n            key={ `${index}-` }\n            data-testid={ `${index}${ing}` }\n          >\n            {foodMeasure[index]}\n          </li>\n        </div>\n      ));\n  };\n  useEffect(() => {\n    renderIngredients();\n  }, []);\n  return renderIngredients();\n}\n\nexport default Ingredients;\n\nIngredients.propTypes = {\n  element: PropTypes.shape({\n    element: PropTypes.string.isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}