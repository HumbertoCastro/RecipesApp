{"ast":null,"code":"var _jsxFileName = \"/home/humberto/Projetos/sd-016-a-project-recipes-app/src/components/Ingredients.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport CheckBoxIngredient from './CheckBoxIngredient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Ingredients(_ref) {\n  _s();\n\n  let {\n    el\n  } = _ref;\n  const history = useHistory();\n  const foodIngredient = Object.values(Object.fromEntries(Object.entries(el).filter(_ref2 => {\n    let [key] = _ref2;\n    return key.includes('strIngredient');\n  }))).filter(x => x !== null && x !== '');\n  const foodMeasure = Object.values(Object.fromEntries(Object.entries(el).filter(_ref3 => {\n    let [key] = _ref3;\n    return key.includes('strMeasure');\n  }))).filter(x => x !== null && x !== '');\n  const ing = '-ingredient-name-and-measure';\n\n  const renderIngredients = () => {\n    if (history.location.pathname.includes('/in-progress')) {\n      return foodIngredient.map((x, i) => /*#__PURE__*/_jsxDEV(CheckBoxIngredient, {\n        el: el,\n        ingr: x,\n        i: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 24\n      }, this));\n    }\n\n    return foodIngredient.map((x, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        \"data-testid\": `${index}${ing}`,\n        children: x\n      }, `${index}-food`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        \"data-testid\": `${index}${ing}`,\n        children: foodMeasure[index]\n      }, `${index}-`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this)]\n    }, `${index}-food-ingrediet`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this));\n  };\n\n  useEffect(() => {\n    renderIngredients();\n  }, []);\n  return renderIngredients();\n}\n\n_s(Ingredients, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n\n_c = Ingredients;\nexport default Ingredients;\nIngredients.propTypes = {\n  el: PropTypes.shape({\n    el: PropTypes.string.isRequired\n  }).isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Ingredients\");","map":{"version":3,"sources":["/home/humberto/Projetos/sd-016-a-project-recipes-app/src/components/Ingredients.jsx"],"names":["React","useEffect","PropTypes","useHistory","CheckBoxIngredient","Ingredients","el","history","foodIngredient","Object","values","fromEntries","entries","filter","key","includes","x","foodMeasure","ing","renderIngredients","location","pathname","map","i","index","propTypes","shape","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;;AAEA,SAASC,WAAT,OAA6B;AAAA;;AAAA,MAAR;AAAEC,IAAAA;AAAF,GAAQ;AAC3B,QAAMC,OAAO,GAAGJ,UAAU,EAA1B;AACA,QAAMK,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CACxCE,WADkC,CACtBF,MAAM,CAChBG,OADU,CACFN,EADE,EAEVO,MAFU,CAEH;AAAA,QAAC,CAACC,GAAD,CAAD;AAAA,WAAWA,GAAG,CAACC,QAAJ,CAAa,eAAb,CAAX;AAAA,GAFG,CADsB,CAAd,EAIpBF,MAJoB,CAIZG,CAAD,IAAOA,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,EAJd,CAAvB;AAKA,QAAMC,WAAW,GAAGR,MAAM,CAACC,MAAP,CAAcD,MAAM,CACrCE,WAD+B,CACnBF,MAAM,CAChBG,OADU,CACFN,EADE,EAEVO,MAFU,CAEH;AAAA,QAAC,CAACC,GAAD,CAAD;AAAA,WAAWA,GAAG,CAACC,QAAJ,CAAa,YAAb,CAAX;AAAA,GAFG,CADmB,CAAd,EAIjBF,MAJiB,CAITG,CAAD,IAAOA,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,EAJjB,CAApB;AAKA,QAAME,GAAG,GAAG,8BAAZ;;AACA,QAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAIZ,OAAO,CAACa,QAAR,CAAiBC,QAAjB,CAA0BN,QAA1B,CAAmC,cAAnC,CAAJ,EAAwD;AACtD,aAAOP,cAAc,CAClBc,GADI,CACA,CAACN,CAAD,EAAIO,CAAJ,kBAAU,QAAC,kBAAD;AAA8B,QAAA,EAAE,EAAGjB,EAAnC;AAAwC,QAAA,IAAI,EAAGU,CAA/C;AAAmD,QAAA,CAAC,EAAGO;AAAvD,SAA0BA,CAA1B;AAAA;AAAA;AAAA;AAAA,cADV,CAAP;AAED;;AACD,WAAOf,cAAc,CAClBc,GADI,CACA,CAACN,CAAD,EAAIQ,KAAJ,kBACH;AAAA,8BACE;AAA4B,uBAAe,GAAEA,KAAM,GAAEN,GAAI,EAAzD;AAAA,kBAA8DF;AAA9D,SAAW,GAAEQ,KAAM,OAAnB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAEE,uBAAe,GAAEA,KAAM,GAAEN,GAAI,EAF/B;AAAA,kBAIGD,WAAW,CAACO,KAAD;AAJd,SACS,GAAEA,KAAM,GADjB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAY,GAAEA,KAAM,iBAApB;AAAA;AAAA;AAAA;AAAA,YAFG,CAAP;AAYD,GAjBD;;AAkBAvB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAOA,iBAAiB,EAAxB;AACD;;GAnCQd,W;UACSF,U;;;KADTE,W;AAqCT,eAAeA,WAAf;AAEAA,WAAW,CAACoB,SAAZ,GAAwB;AACtBnB,EAAAA,EAAE,EAAEJ,SAAS,CAACwB,KAAV,CAAgB;AAClBpB,IAAAA,EAAE,EAAEJ,SAAS,CAACyB,MAAV,CAAiBC;AADH,GAAhB,EAEDA;AAHmB,CAAxB","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport CheckBoxIngredient from './CheckBoxIngredient';\n\nfunction Ingredients({ el }) {\n  const history = useHistory();\n  const foodIngredient = Object.values(Object\n    .fromEntries(Object\n      .entries(el)\n      .filter(([key]) => key.includes('strIngredient'))))\n    .filter((x) => x !== null && x !== '');\n  const foodMeasure = Object.values(Object\n    .fromEntries(Object\n      .entries(el)\n      .filter(([key]) => key.includes('strMeasure'))))\n    .filter((x) => x !== null && x !== '');\n  const ing = '-ingredient-name-and-measure';\n  const renderIngredients = () => {\n    if (history.location.pathname.includes('/in-progress')) {\n      return foodIngredient\n        .map((x, i) => <CheckBoxIngredient key={ i } el={ el } ingr={ x } i={ i } />);\n    }\n    return foodIngredient\n      .map((x, index) => (\n        <div key={ `${index}-food-ingrediet` }>\n          <li key={ `${index}-food` } data-testid={ `${index}${ing}` }>{x}</li>\n          <li\n            key={ `${index}-` }\n            data-testid={ `${index}${ing}` }\n          >\n            {foodMeasure[index]}\n          </li>\n        </div>\n      ));\n  };\n  useEffect(() => {\n    renderIngredients();\n  }, []);\n  return renderIngredients();\n}\n\nexport default Ingredients;\n\nIngredients.propTypes = {\n  el: PropTypes.shape({\n    el: PropTypes.string.isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}